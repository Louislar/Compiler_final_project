Nonterminals useless in grammar

   LASTEXP
   ELSE-EXP


Terminals unused in grammar

   INUMBER
   '^'
   '['
   ']'


Rules useless in grammar

   60 LASTEXP: EXP


Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: STMT
    2        | STMT PROGRAM

    3 STMT: EXP
    4     | DEF-STMT
    5     | PRINT-STMT

    6 PRINT-STMT: '(' printnum EXP ')'
    7           | '(' printbool EXP ')'

    8 EXP: boolval
    9    | number
   10    | VARIABLE
   11    | NUM-OP
   12    | LOGICAL-OP
   13    | FUNEXP
   14    | FUNCALL
   15    | IFEXP

   16 NUM-OP: PLUS
   17       | MINUS
   18       | MULTIPLY
   19       | DIVIDE
   20       | MODULUS
   21       | GREATER
   22       | SMALLER
   23       | EQUAL

   24 moreEXP: EXP
   25        | EXP moreEXP

   26 PLUS: '(' '+' EXP moreEXP ')'

   27 MINUS: '(' '-' EXP EXP ')'

   28 MULTIPLY: '(' '*' EXP moreEXP ')'

   29 DIVIDE: '(' '/' EXP EXP ')'

   30 MODULUS: '(' mod EXP EXP ')'

   31 GREATER: '(' '>' EXP EXP ')'

   32 SMALLER: '(' '<' EXP EXP ')'

   33 EQUAL: '(' '=' EXP moreEXP ')'

   34 LOGICAL-OP: AND-OP
   35           | OR-OP
   36           | NOT-OP

   37 AND-OP: '(' andop EXP moreEXP ')'

   38 OR-OP: '(' orop EXP moreEXP ')'

   39 NOT-OP: '(' notop EXP ')'

   40 DEF-STMT: '(' define VARIABLE EXP ')'

   41 VARIABLE: id

   42 FUNEXP: '(' lambda FUNIDs FUNBODY ')'

   43 moreIDs: id
   44        | id moreIDs

   45 FUNIDs: '(' moreIDs ')'
   46       | '(' ')'

   47 FUNBODY: EXP

   48 morePRAM: PARAM
   49         | PARAM morePRAM

   50 FUNCALL: '(' FUNEXP morePRAM ')'
   51        | '(' FUNEXP ')'
   52        | '(' FUNNAME morePRAM ')'
   53        | '(' FUNNAME ')'

   54 PARAM: EXP

   55 FUNNAME: id

   56 IFEXP: '(' ifop TESTEXP THENEXP ELSEEXP ')'

   57 TESTEXP: EXP

   58 THENEXP: EXP

   59 ELSEEXP: EXP


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 7 26 27 28 29 30 31 32 33 37 38 39 40 42 45 46 50 51 52
    53 56
')' (41) 6 7 26 27 28 29 30 31 32 33 37 38 39 40 42 45 46 50 51 52
    53 56
'*' (42) 28
'+' (43) 26
'-' (45) 27
'/' (47) 29
'<' (60) 32
'=' (61) 33
'>' (62) 31
'[' (91)
']' (93)
'^' (94)
error (256)
INUMBER (258)
number (259) 9
id (260) 41 43 44 55
boolval (261) 8
andop (262) 37
define (263) 40
ifop (264) 56
lambda (265) 42
mod (266) 30
notop (267) 39
orop (268) 38
printnum (269) 6
printbool (270) 7


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
PROGRAM (29)
    on left: 1 2, on right: 0 2
STMT (30)
    on left: 3 4 5, on right: 1 2
PRINT-STMT (31)
    on left: 6 7, on right: 5
EXP (32)
    on left: 8 9 10 11 12 13 14 15, on right: 3 6 7 24 25 26 27 28
    29 30 31 32 33 37 38 39 40 47 54 57 58 59
NUM-OP (33)
    on left: 16 17 18 19 20 21 22 23, on right: 11
moreEXP (34)
    on left: 24 25, on right: 25 26 28 33 37 38
PLUS (35)
    on left: 26, on right: 16
MINUS (36)
    on left: 27, on right: 17
MULTIPLY (37)
    on left: 28, on right: 18
DIVIDE (38)
    on left: 29, on right: 19
MODULUS (39)
    on left: 30, on right: 20
GREATER (40)
    on left: 31, on right: 21
SMALLER (41)
    on left: 32, on right: 22
EQUAL (42)
    on left: 33, on right: 23
LOGICAL-OP (43)
    on left: 34 35 36, on right: 12
AND-OP (44)
    on left: 37, on right: 34
OR-OP (45)
    on left: 38, on right: 35
NOT-OP (46)
    on left: 39, on right: 36
DEF-STMT (47)
    on left: 40, on right: 4
VARIABLE (48)
    on left: 41, on right: 10 40
FUNEXP (49)
    on left: 42, on right: 13 50 51
moreIDs (50)
    on left: 43 44, on right: 44 45
FUNIDs (51)
    on left: 45 46, on right: 42
FUNBODY (52)
    on left: 47, on right: 42
morePRAM (53)
    on left: 48 49, on right: 49 50 52
FUNCALL (54)
    on left: 50 51 52 53, on right: 14
PARAM (55)
    on left: 54, on right: 48 49
FUNNAME (56)
    on left: 55, on right: 52 53
IFEXP (57)
    on left: 56, on right: 15
TESTEXP (58)
    on left: 57, on right: 56
THENEXP (59)
    on left: 58, on right: 56
ELSEEXP (60)
    on left: 59, on right: 56


State 0

    0 $accept: . PROGRAM $end

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 4

    PROGRAM     go to state 5
    STMT        go to state 6
    PRINT-STMT  go to state 7
    EXP         go to state 8
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    DEF-STMT    go to state 22
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 1

    9 EXP: number .

    $default  reduce using rule 9 (EXP)


State 2

   41 VARIABLE: id .

    $default  reduce using rule 41 (VARIABLE)


State 3

    8 EXP: boolval .

    $default  reduce using rule 8 (EXP)


State 4

    6 PRINT-STMT: '(' . printnum EXP ')'
    7           | '(' . printbool EXP ')'
   26 PLUS: '(' . '+' EXP moreEXP ')'
   27 MINUS: '(' . '-' EXP EXP ')'
   28 MULTIPLY: '(' . '*' EXP moreEXP ')'
   29 DIVIDE: '(' . '/' EXP EXP ')'
   30 MODULUS: '(' . mod EXP EXP ')'
   31 GREATER: '(' . '>' EXP EXP ')'
   32 SMALLER: '(' . '<' EXP EXP ')'
   33 EQUAL: '(' . '=' EXP moreEXP ')'
   37 AND-OP: '(' . andop EXP moreEXP ')'
   38 OR-OP: '(' . orop EXP moreEXP ')'
   39 NOT-OP: '(' . notop EXP ')'
   40 DEF-STMT: '(' . define VARIABLE EXP ')'
   42 FUNEXP: '(' . lambda FUNIDs FUNBODY ')'
   50 FUNCALL: '(' . FUNEXP morePRAM ')'
   51        | '(' . FUNEXP ')'
   52        | '(' . FUNNAME morePRAM ')'
   53        | '(' . FUNNAME ')'
   56 IFEXP: '(' . ifop TESTEXP THENEXP ELSEEXP ')'

    id         shift, and go to state 27
    andop      shift, and go to state 28
    define     shift, and go to state 29
    ifop       shift, and go to state 30
    lambda     shift, and go to state 31
    mod        shift, and go to state 32
    notop      shift, and go to state 33
    orop       shift, and go to state 34
    printnum   shift, and go to state 35
    printbool  shift, and go to state 36
    '+'        shift, and go to state 37
    '-'        shift, and go to state 38
    '*'        shift, and go to state 39
    '/'        shift, and go to state 40
    '('        shift, and go to state 41
    '>'        shift, and go to state 42
    '<'        shift, and go to state 43
    '='        shift, and go to state 44

    FUNEXP   go to state 45
    FUNNAME  go to state 46


State 5

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 47


State 6

    1 PROGRAM: STMT .
    2        | STMT . PROGRAM

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 4

    $default  reduce using rule 1 (PROGRAM)

    PROGRAM     go to state 48
    STMT        go to state 6
    PRINT-STMT  go to state 7
    EXP         go to state 8
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    DEF-STMT    go to state 22
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 7

    5 STMT: PRINT-STMT .

    $default  reduce using rule 5 (STMT)


State 8

    3 STMT: EXP .

    $default  reduce using rule 3 (STMT)


State 9

   11 EXP: NUM-OP .

    $default  reduce using rule 11 (EXP)


State 10

   16 NUM-OP: PLUS .

    $default  reduce using rule 16 (NUM-OP)


State 11

   17 NUM-OP: MINUS .

    $default  reduce using rule 17 (NUM-OP)


State 12

   18 NUM-OP: MULTIPLY .

    $default  reduce using rule 18 (NUM-OP)


State 13

   19 NUM-OP: DIVIDE .

    $default  reduce using rule 19 (NUM-OP)


State 14

   20 NUM-OP: MODULUS .

    $default  reduce using rule 20 (NUM-OP)


State 15

   21 NUM-OP: GREATER .

    $default  reduce using rule 21 (NUM-OP)


State 16

   22 NUM-OP: SMALLER .

    $default  reduce using rule 22 (NUM-OP)


State 17

   23 NUM-OP: EQUAL .

    $default  reduce using rule 23 (NUM-OP)


State 18

   12 EXP: LOGICAL-OP .

    $default  reduce using rule 12 (EXP)


State 19

   34 LOGICAL-OP: AND-OP .

    $default  reduce using rule 34 (LOGICAL-OP)


State 20

   35 LOGICAL-OP: OR-OP .

    $default  reduce using rule 35 (LOGICAL-OP)


State 21

   36 LOGICAL-OP: NOT-OP .

    $default  reduce using rule 36 (LOGICAL-OP)


State 22

    4 STMT: DEF-STMT .

    $default  reduce using rule 4 (STMT)


State 23

   10 EXP: VARIABLE .

    $default  reduce using rule 10 (EXP)


State 24

   13 EXP: FUNEXP .

    $default  reduce using rule 13 (EXP)


State 25

   14 EXP: FUNCALL .

    $default  reduce using rule 14 (EXP)


State 26

   15 EXP: IFEXP .

    $default  reduce using rule 15 (EXP)


State 27

   55 FUNNAME: id .

    $default  reduce using rule 55 (FUNNAME)


State 28

   37 AND-OP: '(' andop . EXP moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 50
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 29

   40 DEF-STMT: '(' define . VARIABLE EXP ')'

    id  shift, and go to state 2

    VARIABLE  go to state 51


State 30

   56 IFEXP: '(' ifop . TESTEXP THENEXP ELSEEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 52
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26
    TESTEXP     go to state 53


State 31

   42 FUNEXP: '(' lambda . FUNIDs FUNBODY ')'

    '('  shift, and go to state 54

    FUNIDs  go to state 55


State 32

   30 MODULUS: '(' mod . EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 56
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 33

   39 NOT-OP: '(' notop . EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 57
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 34

   38 OR-OP: '(' orop . EXP moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 58
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 35

    6 PRINT-STMT: '(' printnum . EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 59
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 36

    7 PRINT-STMT: '(' printbool . EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 60
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 37

   26 PLUS: '(' '+' . EXP moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 61
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 38

   27 MINUS: '(' '-' . EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 62
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 39

   28 MULTIPLY: '(' '*' . EXP moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 63
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 40

   29 DIVIDE: '(' '/' . EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 64
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 41

   42 FUNEXP: '(' . lambda FUNIDs FUNBODY ')'

    lambda  shift, and go to state 31


State 42

   31 GREATER: '(' '>' . EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 65
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 43

   32 SMALLER: '(' '<' . EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 66
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 44

   33 EQUAL: '(' '=' . EXP moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 67
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 45

   50 FUNCALL: '(' FUNEXP . morePRAM ')'
   51        | '(' FUNEXP . ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49
    ')'      shift, and go to state 68

    EXP         go to state 69
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    morePRAM    go to state 70
    FUNCALL     go to state 25
    PARAM       go to state 71
    IFEXP       go to state 26


State 46

   52 FUNCALL: '(' FUNNAME . morePRAM ')'
   53        | '(' FUNNAME . ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49
    ')'      shift, and go to state 72

    EXP         go to state 69
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    morePRAM    go to state 73
    FUNCALL     go to state 25
    PARAM       go to state 71
    IFEXP       go to state 26


State 47

    0 $accept: PROGRAM $end .

    $default  accept


State 48

    2 PROGRAM: STMT PROGRAM .

    $default  reduce using rule 2 (PROGRAM)


State 49

   26 PLUS: '(' . '+' EXP moreEXP ')'
   27 MINUS: '(' . '-' EXP EXP ')'
   28 MULTIPLY: '(' . '*' EXP moreEXP ')'
   29 DIVIDE: '(' . '/' EXP EXP ')'
   30 MODULUS: '(' . mod EXP EXP ')'
   31 GREATER: '(' . '>' EXP EXP ')'
   32 SMALLER: '(' . '<' EXP EXP ')'
   33 EQUAL: '(' . '=' EXP moreEXP ')'
   37 AND-OP: '(' . andop EXP moreEXP ')'
   38 OR-OP: '(' . orop EXP moreEXP ')'
   39 NOT-OP: '(' . notop EXP ')'
   42 FUNEXP: '(' . lambda FUNIDs FUNBODY ')'
   50 FUNCALL: '(' . FUNEXP morePRAM ')'
   51        | '(' . FUNEXP ')'
   52        | '(' . FUNNAME morePRAM ')'
   53        | '(' . FUNNAME ')'
   56 IFEXP: '(' . ifop TESTEXP THENEXP ELSEEXP ')'

    id      shift, and go to state 27
    andop   shift, and go to state 28
    ifop    shift, and go to state 30
    lambda  shift, and go to state 31
    mod     shift, and go to state 32
    notop   shift, and go to state 33
    orop    shift, and go to state 34
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '*'     shift, and go to state 39
    '/'     shift, and go to state 40
    '('     shift, and go to state 41
    '>'     shift, and go to state 42
    '<'     shift, and go to state 43
    '='     shift, and go to state 44

    FUNEXP   go to state 45
    FUNNAME  go to state 46


State 50

   37 AND-OP: '(' andop EXP . moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 74
    NUM-OP      go to state 9
    moreEXP     go to state 75
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 51

   40 DEF-STMT: '(' define VARIABLE . EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 76
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 52

   57 TESTEXP: EXP .

    $default  reduce using rule 57 (TESTEXP)


State 53

   56 IFEXP: '(' ifop TESTEXP . THENEXP ELSEEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 77
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26
    THENEXP     go to state 78


State 54

   45 FUNIDs: '(' . moreIDs ')'
   46       | '(' . ')'

    id   shift, and go to state 79
    ')'  shift, and go to state 80

    moreIDs  go to state 81


State 55

   42 FUNEXP: '(' lambda FUNIDs . FUNBODY ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 82
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNBODY     go to state 83
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 56

   30 MODULUS: '(' mod EXP . EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 84
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 57

   39 NOT-OP: '(' notop EXP . ')'

    ')'  shift, and go to state 85


State 58

   38 OR-OP: '(' orop EXP . moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 74
    NUM-OP      go to state 9
    moreEXP     go to state 86
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 59

    6 PRINT-STMT: '(' printnum EXP . ')'

    ')'  shift, and go to state 87


State 60

    7 PRINT-STMT: '(' printbool EXP . ')'

    ')'  shift, and go to state 88


State 61

   26 PLUS: '(' '+' EXP . moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 74
    NUM-OP      go to state 9
    moreEXP     go to state 89
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 62

   27 MINUS: '(' '-' EXP . EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 90
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 63

   28 MULTIPLY: '(' '*' EXP . moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 74
    NUM-OP      go to state 9
    moreEXP     go to state 91
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 64

   29 DIVIDE: '(' '/' EXP . EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 92
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 65

   31 GREATER: '(' '>' EXP . EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 93
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 66

   32 SMALLER: '(' '<' EXP . EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 94
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 67

   33 EQUAL: '(' '=' EXP . moreEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 74
    NUM-OP      go to state 9
    moreEXP     go to state 95
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 68

   51 FUNCALL: '(' FUNEXP ')' .

    $default  reduce using rule 51 (FUNCALL)


State 69

   54 PARAM: EXP .

    $default  reduce using rule 54 (PARAM)


State 70

   50 FUNCALL: '(' FUNEXP morePRAM . ')'

    ')'  shift, and go to state 96


State 71

   48 morePRAM: PARAM .
   49         | PARAM . morePRAM

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    $default  reduce using rule 48 (morePRAM)

    EXP         go to state 69
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    morePRAM    go to state 97
    FUNCALL     go to state 25
    PARAM       go to state 71
    IFEXP       go to state 26


State 72

   53 FUNCALL: '(' FUNNAME ')' .

    $default  reduce using rule 53 (FUNCALL)


State 73

   52 FUNCALL: '(' FUNNAME morePRAM . ')'

    ')'  shift, and go to state 98


State 74

   24 moreEXP: EXP .
   25        | EXP . moreEXP

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    $default  reduce using rule 24 (moreEXP)

    EXP         go to state 74
    NUM-OP      go to state 9
    moreEXP     go to state 99
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26


State 75

   37 AND-OP: '(' andop EXP moreEXP . ')'

    ')'  shift, and go to state 100


State 76

   40 DEF-STMT: '(' define VARIABLE EXP . ')'

    ')'  shift, and go to state 101


State 77

   58 THENEXP: EXP .

    $default  reduce using rule 58 (THENEXP)


State 78

   56 IFEXP: '(' ifop TESTEXP THENEXP . ELSEEXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 49

    EXP         go to state 102
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 23
    FUNEXP      go to state 24
    FUNCALL     go to state 25
    IFEXP       go to state 26
    ELSEEXP     go to state 103


State 79

   43 moreIDs: id .
   44        | id . moreIDs

    id  shift, and go to state 79

    $default  reduce using rule 43 (moreIDs)

    moreIDs  go to state 104


State 80

   46 FUNIDs: '(' ')' .

    $default  reduce using rule 46 (FUNIDs)


State 81

   45 FUNIDs: '(' moreIDs . ')'

    ')'  shift, and go to state 105


State 82

   47 FUNBODY: EXP .

    $default  reduce using rule 47 (FUNBODY)


State 83

   42 FUNEXP: '(' lambda FUNIDs FUNBODY . ')'

    ')'  shift, and go to state 106


State 84

   30 MODULUS: '(' mod EXP EXP . ')'

    ')'  shift, and go to state 107


State 85

   39 NOT-OP: '(' notop EXP ')' .

    $default  reduce using rule 39 (NOT-OP)


State 86

   38 OR-OP: '(' orop EXP moreEXP . ')'

    ')'  shift, and go to state 108


State 87

    6 PRINT-STMT: '(' printnum EXP ')' .

    $default  reduce using rule 6 (PRINT-STMT)


State 88

    7 PRINT-STMT: '(' printbool EXP ')' .

    $default  reduce using rule 7 (PRINT-STMT)


State 89

   26 PLUS: '(' '+' EXP moreEXP . ')'

    ')'  shift, and go to state 109


State 90

   27 MINUS: '(' '-' EXP EXP . ')'

    ')'  shift, and go to state 110


State 91

   28 MULTIPLY: '(' '*' EXP moreEXP . ')'

    ')'  shift, and go to state 111


State 92

   29 DIVIDE: '(' '/' EXP EXP . ')'

    ')'  shift, and go to state 112


State 93

   31 GREATER: '(' '>' EXP EXP . ')'

    ')'  shift, and go to state 113


State 94

   32 SMALLER: '(' '<' EXP EXP . ')'

    ')'  shift, and go to state 114


State 95

   33 EQUAL: '(' '=' EXP moreEXP . ')'

    ')'  shift, and go to state 115


State 96

   50 FUNCALL: '(' FUNEXP morePRAM ')' .

    $default  reduce using rule 50 (FUNCALL)


State 97

   49 morePRAM: PARAM morePRAM .

    $default  reduce using rule 49 (morePRAM)


State 98

   52 FUNCALL: '(' FUNNAME morePRAM ')' .

    $default  reduce using rule 52 (FUNCALL)


State 99

   25 moreEXP: EXP moreEXP .

    $default  reduce using rule 25 (moreEXP)


State 100

   37 AND-OP: '(' andop EXP moreEXP ')' .

    $default  reduce using rule 37 (AND-OP)


State 101

   40 DEF-STMT: '(' define VARIABLE EXP ')' .

    $default  reduce using rule 40 (DEF-STMT)


State 102

   59 ELSEEXP: EXP .

    $default  reduce using rule 59 (ELSEEXP)


State 103

   56 IFEXP: '(' ifop TESTEXP THENEXP ELSEEXP . ')'

    ')'  shift, and go to state 116


State 104

   44 moreIDs: id moreIDs .

    $default  reduce using rule 44 (moreIDs)


State 105

   45 FUNIDs: '(' moreIDs ')' .

    $default  reduce using rule 45 (FUNIDs)


State 106

   42 FUNEXP: '(' lambda FUNIDs FUNBODY ')' .

    $default  reduce using rule 42 (FUNEXP)


State 107

   30 MODULUS: '(' mod EXP EXP ')' .

    $default  reduce using rule 30 (MODULUS)


State 108

   38 OR-OP: '(' orop EXP moreEXP ')' .

    $default  reduce using rule 38 (OR-OP)


State 109

   26 PLUS: '(' '+' EXP moreEXP ')' .

    $default  reduce using rule 26 (PLUS)


State 110

   27 MINUS: '(' '-' EXP EXP ')' .

    $default  reduce using rule 27 (MINUS)


State 111

   28 MULTIPLY: '(' '*' EXP moreEXP ')' .

    $default  reduce using rule 28 (MULTIPLY)


State 112

   29 DIVIDE: '(' '/' EXP EXP ')' .

    $default  reduce using rule 29 (DIVIDE)


State 113

   31 GREATER: '(' '>' EXP EXP ')' .

    $default  reduce using rule 31 (GREATER)


State 114

   32 SMALLER: '(' '<' EXP EXP ')' .

    $default  reduce using rule 32 (SMALLER)


State 115

   33 EQUAL: '(' '=' EXP moreEXP ')' .

    $default  reduce using rule 33 (EQUAL)


State 116

   56 IFEXP: '(' ifop TESTEXP THENEXP ELSEEXP ')' .

    $default  reduce using rule 56 (IFEXP)
